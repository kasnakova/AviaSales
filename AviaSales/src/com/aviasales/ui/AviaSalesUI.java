package com.aviasales.ui;

import java.awt.Dialog.ModalityType;
import java.io.File;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

import com.aviasales.data.StorageAdapter;
import com.aviasales.logic.Analizator;
import com.aviasales.logic.Booking;
import com.aviasales.models.Person;
import com.aviasales.models.Route;
import com.aviasales.models.SearchParams;
import com.aviasales.utilities.UserInputValidator;
import com.aviasales.utilities.Utils;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JList;

/**
 * The main window of the application, iteracting with the user and the other
 * classes, which provide the core functionality of the application
 * 
 * @author Liza
 */
public class AviaSalesUI extends javax.swing.JFrame {
	private List<Route> routes;
	private List<Route> returnRoutes;
	private int numberOfPeople;
	private boolean isInfoSaved = false;

	public AviaSalesUI() {
		initComponents();
		setComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		panelSearch = new javax.swing.JPanel();
		jLabel1 = new javax.swing.JLabel();
		txtFromAirport = new javax.swing.JTextField();
		jLabel2 = new javax.swing.JLabel();
		txtToAirport = new javax.swing.JTextField();
		chkTwoWayFlight = new javax.swing.JCheckBox();
		btnSearch = new javax.swing.JButton();
		lisFlights = new javax.swing.JScrollPane();
		listOfReturnRoutes = new javax.swing.JList<>();
		txtDate = new javax.swing.JTextField();
		jLabel3 = new javax.swing.JLabel();
		txtReturnDate = new javax.swing.JTextField();
		lblReturnDate = new javax.swing.JLabel();
		jLabel4 = new javax.swing.JLabel();
		txtPersonCount = new javax.swing.JTextField();
		lblReturnFlights = new javax.swing.JLabel();
		lisFlights1 = new javax.swing.JScrollPane();
		listOfRoutes = new javax.swing.JList<>();
		jLabel6 = new javax.swing.JLabel();
		jMenuBar1 = new javax.swing.JMenuBar();
		menuSearch = new javax.swing.JMenu();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("AviaSales");
		setResizable(false);

		jLabel1.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
		jLabel1.setText("From:");

		txtFromAirport.setText("KAZAN");
		txtFromAirport.setToolTipText("");

		jLabel2.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
		jLabel2.setText("To:");

		txtToAirport.setText("KISLOVODSK");
		txtToAirport.setToolTipText("");

		chkTwoWayFlight.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
		chkTwoWayFlight.setText("Two-way flight");
		chkTwoWayFlight.setToolTipText("");
		chkTwoWayFlight.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				chkTwoWayFlightActionPerformed(evt);
			}
		});

		btnSearch.setText("Search");
		btnSearch.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnSearchActionPerformed(evt);
			}
		});

		listOfReturnRoutes.setModel(new DefaultListModel());
		listOfReturnRoutes.setToolTipText("");
		listOfReturnRoutes.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				listOfReturnRoutesMouseClicked(evt);
			}
		});
		lisFlights.setViewportView(listOfReturnRoutes);

		txtDate.setToolTipText("Format: day/month/year");

		jLabel3.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
		jLabel3.setText("Date:");

		txtReturnDate.setToolTipText("Format: day/month/year");

		lblReturnDate.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
		lblReturnDate.setText("Return Date:");

		jLabel4.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
		jLabel4.setText("Person count:");

		txtPersonCount.setText("2");
		txtPersonCount.setToolTipText("");

		lblReturnFlights.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
		lblReturnFlights.setText("Return flights:");

		listOfRoutes.setModel(new DefaultListModel());
		listOfRoutes.setToolTipText("");
		listOfRoutes.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				listOfRoutesMouseClicked(evt);
			}
		});
		lisFlights1.setViewportView(listOfRoutes);

		jLabel6.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
		jLabel6.setText("Click on a flight to start the buying-a-ticket process");

		javax.swing.GroupLayout panelSearchLayout = new javax.swing.GroupLayout(panelSearch);
		panelSearch.setLayout(panelSearchLayout);
		panelSearchLayout
				.setHorizontalGroup(
						panelSearchLayout
								.createParallelGroup(
										javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(panelSearchLayout.createSequentialGroup().addContainerGap()
										.addGroup(panelSearchLayout
												.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(
														lisFlights)
										.addGroup(panelSearchLayout.createSequentialGroup()
												.addComponent(chkTwoWayFlight).addGap(43, 43, 43)
												.addComponent(lblReturnDate).addGap(18, 18, 18)
												.addComponent(txtReturnDate, javax.swing.GroupLayout.PREFERRED_SIZE,
														143, javax.swing.GroupLayout.PREFERRED_SIZE)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
														javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
												.addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 109,
														javax.swing.GroupLayout.PREFERRED_SIZE))
								.addGroup(panelSearchLayout.createSequentialGroup().addGroup(panelSearchLayout
										.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addGroup(panelSearchLayout.createSequentialGroup().addComponent(jLabel1)
												.addGap(18, 18, 18)
												.addComponent(txtFromAirport, javax.swing.GroupLayout.PREFERRED_SIZE,
														143, javax.swing.GroupLayout.PREFERRED_SIZE)
												.addGap(41, 41, 41).addComponent(jLabel2).addGap(18, 18, 18)
												.addComponent(txtToAirport, javax.swing.GroupLayout.PREFERRED_SIZE, 143,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addGap(35, 35, 35).addComponent(jLabel3).addGap(18, 18, 18)
												.addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 143,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addGap(35, 35, 35).addComponent(jLabel4).addGap(18, 18, 18)
												.addComponent(txtPersonCount, javax.swing.GroupLayout.PREFERRED_SIZE,
														143, javax.swing.GroupLayout.PREFERRED_SIZE))
										.addComponent(lblReturnFlights).addComponent(jLabel6))
										.addGap(0, 0, Short.MAX_VALUE))).addContainerGap())
				.addGroup(panelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(panelSearchLayout.createSequentialGroup().addContainerGap().addComponent(lisFlights1)
								.addContainerGap())));
		panelSearchLayout
				.setVerticalGroup(panelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(panelSearchLayout.createSequentialGroup().addContainerGap().addGroup(panelSearchLayout
								.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel1)
								.addComponent(txtFromAirport, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jLabel2)
								.addComponent(txtToAirport, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jLabel3)
								.addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jLabel4).addComponent(txtPersonCount,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(12, 12, 12)
						.addGroup(panelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(chkTwoWayFlight)
								.addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 38,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(lblReturnDate).addComponent(txtReturnDate,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jLabel6)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 208, Short.MAX_VALUE)
						.addComponent(lblReturnFlights)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(lisFlights, javax.swing.GroupLayout.PREFERRED_SIZE, 183,
								javax.swing.GroupLayout.PREFERRED_SIZE).addGap(43, 43, 43))
				.addGroup(panelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(panelSearchLayout.createSequentialGroup().addGap(132, 132, 132)
								.addComponent(lisFlights1, javax.swing.GroupLayout.PREFERRED_SIZE, 183,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addContainerGap(205, Short.MAX_VALUE))));

		menuSearch.setText("Search");
		menuSearch.setToolTipText("");
		jMenuBar1.add(menuSearch);

		setJMenuBar(jMenuBar1);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addComponent(panelSearch, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(0, 0, Short.MAX_VALUE)));
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(panelSearch,
						javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	/**
	 * Sets the visibility of some components and the initial value of others
	 */
	private void setComponents() {
		lblReturnDate.setVisible(false);
		txtReturnDate.setVisible(false);
		lblReturnFlights.setVisible(false);
		listOfReturnRoutes.setVisible(false);
		String todayStr = Utils.parseDateToString(LocalDate.now());
		txtDate.setText(todayStr);
		txtReturnDate.setText(todayStr);
	}

	/**
	 * Makes sure some fields are hidden/visible when they need to be
	 * 
	 * @param evt
	 */
	private void chkTwoWayFlightActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_chkTwoWayFlightActionPerformed
		lblReturnDate.setVisible(chkTwoWayFlight.isSelected());
		txtReturnDate.setVisible(chkTwoWayFlight.isSelected());
		if (!chkTwoWayFlight.isSelected()) {
			lblReturnFlights.setVisible(false);
			listOfReturnRoutes.setVisible(false);
		}
	}// GEN-LAST:event_chkTwoWayFlightActionPerformed

	/**
	 * Validates the user input and calls methods for searching through the
	 * available flights which answer the user's criteria
	 * 
	 * @param evt
	 */
	private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnSearchActionPerformed
		String from = txtFromAirport.getText();
		String to = txtToAirport.getText();
		boolean isReturn = chkTwoWayFlight.isSelected();
		if (UserInputValidator.isNullOrEmpty(from)) {
			MessageBoxes.showInvalidInputMessageBox(this, "Please enter from which airport you want to travel.");
		} else if (UserInputValidator.isNullOrEmpty(to)) {
			MessageBoxes.showInvalidInputMessageBox(this, "Please enter to which airport you want to travel.");
		} else if (!UserInputValidator.isDateValid(txtDate.getText())) {
			MessageBoxes.showInvalidInputMessageBox(this,
					"Please enter a valid date in the described format and one that hadn't passed already.");
		} else if (isReturn && !UserInputValidator.isDateValid(txtReturnDate.getText())) {
			MessageBoxes.showInvalidInputMessageBox(this,
					"Please enter a valid return date in the described format and one that hadn't passed already.");
		} else if (!UserInputValidator.isPersonCountValid(txtPersonCount.getText())) {
			MessageBoxes.showInvalidInputMessageBox(this, "Please enter a valid person count.");
		} else {
			LocalDate date = Utils.parseToLocalDate(txtDate.getText());
			int personCount = Integer.parseInt(txtPersonCount.getText());
			LocalDate returnDate = null;
			if (isReturn) {
				returnDate = Utils.parseToLocalDate(txtReturnDate.getText());
				if (date.compareTo(returnDate) > 0) {
					MessageBoxes.showInvalidInputMessageBox(this,
							"Return date should be after or equal the first flight date.");
					return;
				}
			}

			SearchParams sp = new SearchParams(from, to, date, personCount);
			numberOfPeople = personCount;

			try {
				routes = Analizator.searchFlights(sp);

				if (isReturn) {
					SearchParams returnSp = new SearchParams(to, from, returnDate, personCount);
					returnRoutes = Analizator.searchFlights(returnSp);
				}
			} catch (IOException ex) {
				MessageBoxes.showErrorMessageBox(this, "Sorry, something went wrong with the search.");
			}

			displayRoutes(routes, listOfRoutes, "No flights match your criteria");
			if (isReturn) {
				displayRoutes(returnRoutes, listOfReturnRoutes, "No return flights match your criteria");
				listOfReturnRoutes.setVisible(true);
				lblReturnFlights.setVisible(true);
			}
		}
	}// GEN-LAST:event_btnSearchActionPerformed

	/**
	 * Fills the list views with data
	 * 
	 * @param routes
	 *            the available routes (flights)
	 * @param list
	 *            the list view that has to be filled
	 * @param errMessage
	 *            an error message for the user in case something goes wrong and
	 *            the list can't be filled
	 */
	private void displayRoutes(List<Route> routes, JList list, String errMessage) {
		DefaultListModel listModel = (DefaultListModel) list.getModel();
		listModel.removeAllElements();
		if (routes != null && routes.size() > 0) {
			String[] routeData = new String[routes.size()];
			for (int i = 0; i < routeData.length; i++) {
				listModel.addElement(routes.get(i).toString());
			}

		} else {
			JOptionPane.showMessageDialog(this, errMessage, "Sorry", JOptionPane.INFORMATION_MESSAGE);
		}
	}

	private void listOfReturnRoutesMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_listOfReturnRoutesMouseClicked
		int selectedRouteIndex = listOfReturnRoutes.getSelectedIndex();
		if (selectedRouteIndex < 0) {
			return;
		}

		Route route = returnRoutes.get(selectedRouteIndex);
		buyTickets(route);
	}// GEN-LAST:event_listOfReturnRoutesMouseClicked

	private void listOfRoutesMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_listOfRoutesMouseClicked
		int selectedRouteIndex = listOfRoutes.getSelectedIndex();
		if (selectedRouteIndex < 0) {
			return;
		}

		Route route = routes.get(selectedRouteIndex);
		buyTickets(route);
	}// GEN-LAST:event_listOfRoutesMouseClicked

	/**
	 * Starts the process of buying a ticket
	 * 
	 * @param route
	 */
	private void buyTickets(Route route) {
		List<Person> people = new ArrayList<>();
		for (int i = 0; i < numberOfPeople; i++) {
			Person person = getPersonalInfo(route, "Traveller #" + (i + 1) + " info");
			if (person != null) {
				people.add(person);
			}
		}

		if (people.size() != numberOfPeople) {
			MessageBoxes.showErrorMessageBox(this,
					String.format(
							"Chosen person count is %d, but info was not filled in for all of them. Buying of ticket canceld.",
							numberOfPeople));
		} else {
			if (creditCardInfo()) {
				if (!isInfoSaved) {
					int choice = JOptionPane.showConfirmDialog(this,
							"Would you like your personal information to be saved for future orders?", "Save info",
							JOptionPane.YES_NO_OPTION);
					if (choice == 0) {
						if (StorageAdapter.addPeople(people)) {
							MessageBoxes.showSuccessMessageBox(rootPane, "Info saved.");
						} else {
							MessageBoxes.showErrorMessageBox(this,
									"Sorry, something went wrong and we couldn't save your info.");
						}
					}
				}

				saveTickets(people, route);
			}
		}
	}

	/**
	 * Asks the user to provide a path in which his tickets will be saved
	 * 
	 * @param people
	 * @param route
	 */
	private void saveTickets(List<Person> people, Route route) {
		JFileChooser chooser = new JFileChooser();
		chooser.setDialogTitle("Choose where to save your tickets");
		chooser.showOpenDialog(this);
		File f = chooser.getSelectedFile();
		String filename = f.getAbsolutePath();

		Booking booking = new Booking();
		if (booking.generateTickets(people, route, filename)) {
			MessageBoxes.showSuccessMessageBox(this, "Your tickets have been successfully saved");
		} else {
			MessageBoxes.showErrorMessageBox(this,
					"Sorry, something went wrong and we couldn't generate your tickets.");
		}
	}

	/**
	 * Takes personal info from the user using another dialog
	 * 
	 * @param route
	 * @param title
	 * @return
	 */
	private Person getPersonalInfo(Route route, String title) {
		PersonalInfoDialog dialogPanel = new PersonalInfoDialog(route);
		JDialog dialog = null;
		dialog = new JDialog(this, title, ModalityType.APPLICATION_MODAL);
		dialog.getContentPane().add(dialogPanel);
		dialog.pack();
		dialog.setLocationRelativeTo(null);
		dialog.setVisible(true);
		isInfoSaved = dialogPanel.isInfoSaved();
		return dialogPanel.getPesonalInfo();
	}

	/**
	 * Takes the credit card info of a user for buying a ticket
	 * 
	 * @return
	 */
	private boolean creditCardInfo() {
		JComboBox cardTypes = new JComboBox(new Object[] { "MasterCard", "Visa", "WesternUnion" });
		cardTypes.setEditable(false);
		JTextField name = new JTextField();
		JTextField creditCardNumber = new JTextField();
		final JComponent[] inputs = new JComponent[] { new JLabel("Card Type:"), cardTypes,
				new JLabel("Cardholder Name:"), name, new JLabel("Card No:"), creditCardNumber };

		int choice = JOptionPane.showConfirmDialog(null, inputs, "Payment", JOptionPane.PLAIN_MESSAGE);
		if (choice != 0 || UserInputValidator.isNullOrEmpty(name.getText())
				|| UserInputValidator.isNullOrEmpty(creditCardNumber.getText())) {
			MessageBoxes.showInvalidInputMessageBox(this,
					"Invalid cardholders name or card number. Buying of tickets cancelled");
			return false;
		} else {
			return true;
		}
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton btnSearch;
	private javax.swing.JCheckBox chkTwoWayFlight;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JLabel jLabel6;
	private javax.swing.JMenuBar jMenuBar1;
	private javax.swing.JLabel lblReturnDate;
	private javax.swing.JLabel lblReturnFlights;
	private javax.swing.JScrollPane lisFlights;
	private javax.swing.JScrollPane lisFlights1;
	private javax.swing.JList<String> listOfReturnRoutes;
	private javax.swing.JList<String> listOfRoutes;
	private javax.swing.JMenu menuSearch;
	private javax.swing.JPanel panelSearch;
	private javax.swing.JTextField txtDate;
	private javax.swing.JTextField txtFromAirport;
	private javax.swing.JTextField txtPersonCount;
	private javax.swing.JTextField txtReturnDate;
	private javax.swing.JTextField txtToAirport;
	// End of variables declaration//GEN-END:variables
}
